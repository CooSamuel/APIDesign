swagger: "2.0"
info:
  description: "api demo"
  version: "1.0.0"
  title: "Paperwall"

host: "api.stemaker.top"
basePath: "/"
tags:
- name: "message"
  description: "Everything about your Messages"
- name: "comments"
  description: "Everything about your Comments"
- name: "user"
  description: "Operations about user"
schemes:
- "https"
- "http"
# APIs starts from here
paths:
  /message:
    get:
      tags:
      - "message"
      summary: "get existing messages"
      description: "default to get latest"
      operationId: "getMessages"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "Success"

    post:
      tags:
      - "message"
      summary: "Add a new message"
      description: ""
      operationId: "addMessage"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Message object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Message"
      responses:
        405:
          description: "Invalid input"

    delete:
      tags:
      - "message"
      summary: "Delete a new message"
      description: ""
      operationId: "deleteMessage"
      consumes:
      - "application/json"
      produces:
      - "application/json"

  /message/{msgId}:
    get:
      tags:
      - "message"
      summary: "get a message by _id"
      description: ""
      operationId: "getMessage"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "Success"
  

 
  /user:
    post:
      tags:
      - "user"
      summary: "Create new user"
      description: "Gets session key unionId and openId from wechat adn save to database."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object" 
        required: true
        schema:
          $ref: "#/definitions/CreateUser"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SuccessfulCreatedUser"

  /user/login:
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"

definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"

  # post body for /user
  CreateUser:
    type: "object"
    properties:
      username:
        type: "string"
      openId:
        type: "string"
      unionId:
        type: "string"
      userInfo:
        type: "object"
        properties:
          gender: 
            type: "string"
            example: "f"
          major:
            type: "string"
          grade:
            type: "string"

  # response for /user
  SuccessfulCreatedUser:
    type: "object"
    properties:
      _id: 
        type: "string"

  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Message:
    type: "object"
    required:
    - "user"
    - "createdAt"
    properties:
      _id:
        type: "string"
      content:
        type: "string"
      location:
        type: "string"
        example: "IR"
      tags:
        type: "array"
        items:
          type: "string"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
  NotOK:
    type: "object"
    properties:
      notFinish:
        type: "string"
        example: "To be continue"